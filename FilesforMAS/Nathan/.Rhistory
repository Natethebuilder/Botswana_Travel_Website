# Questions with code blocks like this need to be answered with code
# If you want to add some clarifying comments, add a # in front of them
print("Code goes here")
# Loading the data
csv_data <- read.csv(paste(getwd(), "/expt.csv", sep=""), header = TRUE, sep = ",")
# Loading the data
csv_data <- read.csv(paste(getwd(), "/expt.csv", sep=""), header = TRUE, sep = ",")
# Loading the data
csv_data <- read.csv(paste(getwd(), "/expt.csv", sep=""), header = TRUE, sep = ",")
head(csv_data, 10)
# require('lsr') returns "FALSE" if we don't have lsr
# The "!" in front means the if statement is only triggered if we get a "FALSE".
if (!require('lsr')) install.packages('lsr')
# install.packages('lsr') is easier if you already know you don't have the package
# 1. Installing the package tinytex
if (!require('tinytex')) install.packages('tinytex')
# 2. Installing the corresponding LaTeX distribution
tinytex::install_tinytex()
install.packages('tinytex')
install.packages("tinytex")
describeBy(data, group = data$Gender)
describe(data, group = data$Gender)
library(psych)
describe(data, group = data$Gender)
library(psych)
describe(data, group = data$gender)
library(psych)
desc_data <- describe(data, group = data$gender)
desc_data
library(psych)
desc_data <- describe(data, group = data$gender)
library(psych)
desc_data <- describe(data$gender)
library(psych)
describe(data$gender)
library(psych)
describeBy(data, group = data$Gender)
library(psych)
describeBy(data, group = data$gender)
library(psych)
str(data)
describeBy(data, group = data$gender)
library(psych)
str(data)
describeBy(data, group = data$gender na.rm=TRUE)
library(psych)
str(data)
describeBy(data, group = data$gender)
library(psych)
describeBy(data, group = data$gender)
library(psych)
describe.by(data, group = data$gender)
heavy_drinkers <- data[data$drinks >= 15, ]
not_heavy_drinkers <- data[data$drinks <= 15, ]
sd(heavy_drinkers$inhabitants, na.rm=TRUE)
sd(not_heavy_drinkers$inhabitants, na.rm=TRUE)
sd(heavy_drinkers$age, na.rm=TRUE)
sd(not_heavy_drinkers$age, na.rm=TRUE)
sd(heavy_drinkers$lextale, na.rm=TRUE)
sd(not_heavy_drinkers$lextale, na.rm=TRUE)
vector1 <- c(1,2,3,4,5,6)
vector2 <- c(2,2,3,3,-1,-1)
result <- vector1 + vector2
result
vector1 <- c(1,2,3,4,5,6)
vector2 <- c(1,2)
result <- vector1 + vector2
result
vector1 <- c(1,2,3,4,5,6,7)
vector2 <- c(1,2)
result <- vector1 + vector2
result
food <- factor(c("Pizza", "Salad", "Pizza", "Pasta", "Burger", "Salad"), labels = c("Pizza", "Salad", "Pasta", "Burger"))
food
calculate_BMI <- function(weight_kg, height_m)
bmi <- weight_kg / (height_m^2)
weight <- 84 # kg
height <- 1.90 # meters
bmi <- calculate_BMI(weight, height)
bmi
# Load data
data <- read.csv("Statistics_survey_PMBA_2017_PU2_reduced.csv", stringsAsFactors = TRUE)
# Summary of data
summary(data)
str(data)
head(data)
tail(data)
mean_values <- sapply(data, function(x) if(is.numeric(x)) mean(x, na.rm = TRUE) else NA)
mean_values
sd_age <- sd(data$lextale, na.rm = TRUE)
sd_bmi <- sd(data$drinks, na.rm = TRUE)
sd_age
sd_bmi
heavy_drinkers <- subset(data, drinks>15)
heavy_drinkers_age <- heavy_drinkers$age
mean_age_heavy_drinkers <- mean(heavy_drinkers_age, na.rm = TRUE)
mean_age_heavy_drinkers
mean_age_all <- mean(data$age, na.rm = TRUE)
mean_age_difference <- mean_age_heavy_drinkers - mean_age_all
round(mean_age_difference, 2)
heavy_drinkers <- data[data$drinks >= 15, ]
not_heavy_drinkers <- data[data$drinks <= 15, ]
sd(heavy_drinkers$inhabitants, na.rm=TRUE)
sd(not_heavy_drinkers$inhabitants, na.rm=TRUE)
sd(heavy_drinkers$age, na.rm=TRUE)
sd(not_heavy_drinkers$age, na.rm=TRUE)
sd(heavy_drinkers$lextale, na.rm=TRUE)
sd(not_heavy_drinkers$lextale, na.rm=TRUE)
library(psych)
describe(data)
library(psych)
describe.by(data, group = data$gender)
library(psych)
describe.by(data, group = data$gender)
library(psych)
describeBy(data, group = data$gender)
tinytex::install_tinytex()
muris_data <- read.table(""C:\Users\natha\OneDrive - Delft University of Technology\Desktop\practical_excercises\Practical Exercise 2\Muris.dat"", header = TRUE)
muris_data <- read.table(C:\Users\natha\OneDrive - Delft University of Technology\Desktop\practical_excercises\Practical Exercise 2\Muris.dat, header = TRUE)
muris_data <- read.table(C:\Users\natha\Desktop\practical_excercises\Practical Exercise 2\Muris.dat, header = TRUE)
muris_data <- read.table(C:/Users/natha/OneDrive - Delft University of Technology/Desktop/practical_excercises/Practical Exercise 2/Muris.dat, header = TRUE)
muris_data <- read.table(C:\Users\natha\OneDrive - Delft University of Technology\Desktop\practical_excercises\Practical Exercise 2\Muris.dat, header = TRUE)
muris_data <- read.table('Muris.dat', header = TRUE)
# Scatter plot of Age vs. SCARED for initial visualization.
plot(muris_data$Age, muris_data$SCARED, main = "Age vs. SCARED", xlab = "Age", ylab = "SCARED")
# Generate summary statistics for all variables.
summary(muris_data)
# Calculate mean, median, and standard deviation for numerical variables.
mean(muris_data$SCARED, na.rm = TRUE)
sd(muris_data$SCARED, na.rm = TRUE)
mean(muris_data$Age, na.rm = TRUE)
sd(muris_data$Age, na.rm = TRUE)
corrplot(cor_matrix, method = "circle")
# Install the corrplot package (only need to do this once)
install.packages("corrplot")
# Load the corrplot library
library(corrplot)
# Assuming muris_data is loaded and cor_matrix is created
cor_matrix <- cor(muris_data[, sapply(muris_data, is.numeric)], use = "complete.obs")
# Plot the correlation matrix
corrplot(cor_matrix, method = "circle")
# Fit a linear regression model with SCARED as the outcome and Age as the predictor.
lm_model_age <- lm(SCARED ~ Age, data = muris_data)
# Summarize the model.
summary(lm_model_age)
# Center Age around the mean to get a more meaningful intercept.
muris_data$Age_centered <- muris_data$Age - mean(muris_data$Age, na.rm = TRUE)
# Fit the model again with the centered Age variable.
lm_model_age_centered <- lm(SCARED ~ Age_centered, data = muris_data)
# Summarize the new model.
summary(lm_model_age_centered)
# Fit a linear regression model with Interpretational_Bias as the outcome and SCARED as the predictor.
lm_model_bias <- lm(Interpretational_Bias ~ SCARED, data = muris_data)
# Summarize the model.
summary(lm_model_bias)
# Diagnostic plots to check assumptions.
par(mfrow = c(2, 2))
plot(lm_model_bias)
# Check for influential points using Cook's Distance.
cooksd <- cooks.distance(lm_model_bias)
plot(cooksd, type = "h", main = "Cook's Distance", ylab = "Cook's Distance")
abline(h = 4 / nrow(muris_data), col = "red")  # Threshold line
plot(muris_data$Age, muris_data$SCARED, main = "Age vs. SCARED", xlab = "Age", ylab = "SCARED")
muris_data <- read.table('Muris.dat', header = TRUE)
head(muris_data)
tail(muris_data)
summary(muris_data)
hist(muris_data$SCARED, main = "Distribution of SCARED Scores", xlab = "SCARED", col = "lightblue")
plot(muris_data$Age, muris_data$SCARED, main = "Age vs. SCARED", xlab = "Age", ylab = "SCARED")
# Generate summary statistics for all variables.
summary(muris_data)
# Calculate mean, median, and standard deviation for numerical variables.
mean(muris_data$SCARED, na.rm = TRUE)
sd(muris_data$SCARED, na.rm = TRUE)
mean(muris_data$Age, na.rm = TRUE)
sd(muris_data$Age, na.rm = TRUE)
# Install the corrplot package (only need to do this once)
install.packages("corrplot")
# Load the corrplot library
library(corrplot)
# Assuming muris_data is loaded and cor_matrix is created
cor_matrix <- cor(muris_data[, sapply(muris_data, is.numeric)], use = "complete.obs")
# Plot the correlation matrix
corrplot(cor_matrix, method = "circle")
# Fit a linear regression model with SCARED as the outcome and Age as the predictor.
lm_model_age <- lm(SCARED ~ Age, data = muris_data)
# Summarize the model.
summary(lm_model_age)
# Center Age around the mean to get a more meaningful intercept.
muris_data$Age_centered <- muris_data$Age - mean(muris_data$Age, na.rm = TRUE)
# Fit the model again with the centered Age variable.
lm_model_age_centered <- lm(SCARED ~ Age_centered, data = muris_data)
# Summarize the new model.
summary(lm_model_age_centered)
# Fit a linear regression model with Interpretational_Bias as the outcome and SCARED as the predictor.
lm_model_bias <- lm(Interpretational_Bias ~ SCARED, data = muris_data)
# Summarize the model.
summary(lm_model_bias)
# Diagnostic plots to check assumptions.
par(mfrow = c(2, 2))
plot(lm_model_bias)
# Check for influential points using Cook's Distance.
cooksd <- cooks.distance(lm_model_bias)
plot(cooksd, type = "h", main = "Cook's Distance", ylab = "Cook's Distance")
abline(h = 4 / nrow(muris_data), col = "red")  # Threshold line
install.packages("corrplot")
# Required packages
library(tidyverse)
library(lme4)
library(ggplot2)
library(car)
library(effectsize)
library(emmeans)
# Set working directory (change this to your folder location)
setwd("C:\Users\natha\MASDATA\FilesforMAS\Nathan")
# Set working directory (change this to your folder location)
setwd("C:/Users/natha/MASDATA/FilesforMAS\Nathan")
# Set working directory (change this to your folder location)
setwd("C:/Users/natha/MASDATA/FilesforMAS/Nathan")
# Function to read and process each intervention file
process_intervention_data <- function(file_path, intervention_name) {
# Read the CSV file, skipping the first 6 rows
data <- read.csv(file_path, skip = 6, header = TRUE, check.names = FALSE)
# Explicitly set column names to match your dataset
colnames(data) <- c(
'[run number]',
'environmentType',
'slider_sharedResourceIntensity',
'slider_legalPolicyIntensity',
'slider_communityEventIntensity',
'slider_youthSocializationIntensity',
'slider_trainingIntensity',
'slider_economicIncentiveIntensity',
'[step]',
'coopother-agg',
'defother-agg',
'coopown-agg',
'mean [prejudice] of people',
'mean [prejudice] of people with [group = "A"]',
'mean [prejudice] of people with [group = "B"]',
'mean [prejudice] of people with [group = "C"]',
'mean [prejudice] of people with [group = "D"]',
'mean [prejudice] of people with [group = "E"]'
)
# Select relevant columns and rename for easier handling
data_clean <- data %>%
select(
`[run number]`,
environmentType,
intervention_intensity = matches(paste0("slider_", intervention_name, "Intensity")),
`[step]`,
`coopother-agg`,
`defother-agg`,
`coopown-agg`,
`mean [prejudice] of people`,
`mean [prejudice] of people with [group = "A"]`,
`mean [prejudice] of people with [group = "B"]`,
`mean [prejudice] of people with [group = "C"]`,
`mean [prejudice] of people with [group = "D"]`,
`mean [prejudice] of people with [group = "E"]`
) %>%
mutate(intervention_type = intervention_name)
return(data_clean)
}
# Process each intervention file
legal_policy <- process_intervention_data("legal_policy.csv", "legalPolicy")
training <- process_intervention_data("training.csv", "training")
community_events <- process_intervention_data("community_events.csv", "communityEvent")
youth_social <- process_intervention_data("youth_social.csv", "youthSocialization")
economic <- process_intervention_data("economic.csv", "economicIncentive")
shared_resource <- process_intervention_data("shared_resource.csv", "sharedResource")
# Combine all processed data into one dataframe
all_data <- bind_rows(
legal_policy, training, community_events,
youth_social, economic, shared_resource
)
# Process each intervention file
legal_policy <- process_intervention_data("legal_policy.csv", "legalPolicy")
training <- process_intervention_data("training.csv", "training")
community_events <- process_intervention_data("community_events.csv", "communityEvent")
youth_social <- process_intervention_data("youth_social.csv", "youthSocialization")
# Combine all processed data into one dataframe
all_data <- bind_rows(
legal_policy, training, community_events,
youth_social, economic, shared_resource
)
# Sort by `[step]` to ensure rows remain properly ordered
all_data <- all_data %>% arrange(`[step]`)
# Summary statistics for each intervention
summary_stats <- all_data %>%
group_by(intervention_type, environmentType, intervention_intensity) %>%
summarise(
mean_prejudice = mean(`mean [prejudice] of people`, na.rm = TRUE),
sd_prejudice = sd(`mean [prejudice] of people`, na.rm = TRUE),
mean_coop_other = mean(`coopother-agg`, na.rm = TRUE),
mean_def_other = mean(`defother-agg`, na.rm = TRUE),
n_obs = n(),
.groups = 'drop'
)
# Visualization comparing all interventions
ggplot(summary_stats,
aes(x = intervention_intensity,
y = mean_prejudice,
color = intervention_type)) +
geom_line() +
facet_wrap(~environmentType) +
theme_minimal() +
labs(title = "Comparison of Intervention Effects on Prejudice",
x = "Intervention Intensity",
y = "Mean Prejudice",
color = "Intervention Type") +
theme(axis.text = element_text(size = 12), axis.title = element_text(size = 14))
# Create a comprehensive visualization of prejudice reduction by intervention
ggplot(summary_stats %>% group_by(intervention_type, intervention_intensity) %>%
summarise(mean_prejudice = mean(mean_prejudice)),
aes(x = intervention_intensity,
y = mean_prejudice,
color = intervention_type)) +
geom_line() +
geom_point() +
theme_minimal() +
labs(title = "Effectiveness of Different Interventions",
x = "Intervention Intensity",
y = "Mean Prejudice Level",
color = "Intervention Type") +
theme(axis.text = element_text(size = 12), axis.title = element_text(size = 14))
# Mixed-effects model
model_prejudice <- lmer(
`mean [prejudice] of people` ~ intervention_type * environmentType +
(1 | `[run number]`),  # Random intercept for repeated measures
data = all_data
)
# Model summary
summary(model_prejudice)
# Mixed-effects model
model_prejudice <- lmer(
`mean [prejudice] of people` ~ intervention_type * environmentType +
(1 | `[run number]`),  # Random intercept for repeated measures
data = all_data
)
# Mixed-effects model
model_prejudice <- lmer(
`mean [prejudice] of people` ~ intervention_type * environmentType +
(1 | `[run number]`),  # Random intercept for repeated measures
data = all_data
)
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix", type = "source")
install.packages("Matrix", type = "source")
install.packages("Matrix", type = "source")
library(Matrix)
# Mixed-effects model
model_prejudice <- lmer(
`mean [prejudice] of people` ~ intervention_type * environmentType +
(1 | `[run number]`),  # Random intercept for repeated measures
data = all_data
)
library(lme4)
# Mixed-effects model
model_prejudice <- lmer(
`mean [prejudice] of people` ~ intervention_type * environmentType +
(1 | `[run number]`),  # Random intercept for repeated measures
data = all_data
)
packageVersion("Matrix")
remove.packages("Matrix")
packageVersion("Matrix")
remove.packages("Matrix")
install.packages("Matrix", type = "source")
packageVersion("Matrix")
install.packages("lme4")
library(lme4)
install.packages("lme4", type = "source")
library(lme4)
library(Matrix)
# Mixed-effects model
model_prejudice <- lmer(
`mean [prejudice] of people` ~ intervention_type * environmentType +
(1 | `[run number]`),  # Random intercept for repeated measures
data = all_data
)
View(model_prejudice)
# Model summary
summary(model_prejudice)
# Effect size (marginal and conditional R²)
library(performance)
performance::r2(model_prejudice)
model_prejudice <- lmer(
`mean [prejudice] of people` ~ intervention_type * environmentType +
(1 + intervention_type | `[run number]`),
data = all_data
)
